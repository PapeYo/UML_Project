package fr.insa.chat_app;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.net.SocketException;
import java.net.URL;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.ListIterator;
import java.util.ResourceBundle;

import app_interface.model.Message;
import conversation.File_TCP_Sender;
import conversation.TCP_Sender;
import database_management.db_conv_manager;
import database_management.db_users_manager;
import javafx.event.ActionEvent;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;
import network.NetworkSenderManager;

public class ConvTabController implements Initializable {
	@FXML
	private Label pseudoReceiverLabel;
	@FXML
	private Button reduceConvButton;
	@FXML
	private ScrollPane messageScrollPane;
	@FXML
	private VBox messageAreaVBox;
	@FXML
	private TextField messageTextField;
	@FXML
	private Button sendMessageButton;
	@FXML
	public void fileSend() throws SQLException, SocketException, UnknownHostException, IOException {
		System.out.println("ConvTabController : Button envoi de fichier appuyé");
		NetworkSenderManager.file_tcp_sender = new File_TCP_Sender(ipreceiver,File_TCP_Sender.choose_file());
	}
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		sendMessageButton.setDefaultButton(true);
		
	}

	private String myPseudo;
	private String ipreceiver;
	
	private Controller control;

	public void setControl(Controller control) {
		this.control = control;
	}

	public void setMyPseudo(String ipsender) {
		this.myPseudo = ipsender;
	}

	public void setIpReceiver(String ipreceiver) {
		this.ipreceiver = ipreceiver;
	}


	// Event Listener on Button[#reduceConvButton].onAction
	@SuppressWarnings("exports")
	@FXML
	public void reduceConv(ActionEvent event) {
		// TODO Autogenerated
		//Controller.tabPane.getTabs().remove(indiceTab);	
		System.out.println("ConvTabController : reduction de la conversation");
		control.closeTab(ipreceiver);
	}


	// Event Listener on Button[#sendMessageButton].onAction
	@SuppressWarnings("exports")
	@FXML
	public void sendMessage(ActionEvent event) throws SQLException, SocketException, UnknownHostException {
		String message = messageTextField.getText();
		if(message!="") {

			///// TIMESTAMP
			Timestamp ts= new Timestamp(new Date().getTime());  
			SimpleDateFormat sdf = new SimpleDateFormat("HH:mm dd-MM-yyyy");
			String time = sdf.format(ts);
			
			String receiverPseudo = db_users_manager.getUserPseudo(ipreceiver);
			//// Affichage du message sur l'interface
			showMessageJustSent(new Message(0,myPseudo,message,time));

			//Envoi du message vers le destinataire
			System.out.println("ConvTabController : Envoi du message vers " + receiverPseudo);
			String ipreceiver = db_users_manager.getUserIP(receiverPseudo);
			NetworkSenderManager.tcp_sender = new TCP_Sender(ipreceiver,message);
		}


	}


	//Load l'historique de conversation
	public void loadHistory() {
		System.out.println("ConvTabController : Loading de l'historique de la conversation si elle existe");
		ArrayList<Message> history = new ArrayList<Message>();
		try {
			history = db_conv_manager.selectConvWith(ipreceiver);
			System.out.println("ConvTabController: ipreceiver ="+ipreceiver);
			System.out.println("ConvTabController: historique de conv avec ledit user :"+history);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ListIterator<Message> hi = history.listIterator();
		while (hi.hasNext()) {
			showMessage(hi.next());
		}
		System.out.println("ConvTabController : Loading history successful");
	}

	//affiche un message sur l'interface
	private void showMessage(Message message) {
		messageAreaVBox.getChildren().add(message);
	}

	//affiche le message qui vient d'être envoyé sur l'interface
	private void showMessageJustSent(Message message) {
		showMessage(message);
		//Vide le champs texte
		messageTextField.setText("");
	}

	public void setLabel(String pseudo) {
		pseudoReceiverLabel.setText(pseudo);
	}

	
}